import logging
import sys
import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–æ–≤
import time
import gspread
import pandas as pd
from datetime import datetime
from telefunc import tel_token, sql_base_read_, admin
from speaker import download_file, recognize_speech


token = tel_token()
bot = telebot.TeleBot(token)

butList = (
    "üîë –í–∞—Ä–∏–∞–Ω—Ç",
    "üìà –¢–æ–ø",
    "üìí –ú–µ—Ç–æ–¥–∏—á–∫–∏",
    "üìñ –£—á–µ–±–Ω–∏–∫",
    "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
)

butAdmin = (
    "üì© –†–∞—Å—Å—ã–ª–∫–∞",
    "üóÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç",
    "‚ùå –í—ã—Ö–æ–¥"
)


def user_sql(user_id): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫
    with sql_base_read_() as connection:
        print(connection)
        show_db_query = "INSERT INTO teldata (user_id, active) VALUES (%s, %s)"
        data_tg = [(user_id, 1)]
        with connection.cursor() as cursor:
            cursor.executemany(show_db_query, data_tg)
            connection.commit()
            print("id append")

def user_select(message):  # –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–π
    with sql_base_read_() as connection:
        print(connection)
        show_select = "SELECT user_id FROM data_user"
        with connection.cursor() as cursor:
            cursor.execute(show_select)
            for result in cursor.fetchall():
                bot.copy_message(chat_id = result, from_chat_id=message.chat.id, message_id=message.message_id)

def user_sql_reg(user_id, username, group, surname, name, aftername, study): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with sql_base_read_() as connection:
        print(connection)
        show_db_query = "INSERT INTO namedata (user_id, user_name, user_group, syrname, name, aftername, study) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        data_tg = [(user_id, username, group, surname, name, aftername, study)]
        with connection.cursor() as cursor:
            cursor.executemany(show_db_query, data_tg)
            connection.commit()
            print("user registered")

def user_reg(user_id, name, profile, name_group, section, variant, variant_D1): #—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with sql_base_read_() as connection:
        #print(connection)
        show_db_query = "INSERT INTO data_user (user_id, name, profile, name_group, section, variant, variant_D1) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        data_tg = [(user_id, name, profile, name_group, section, variant, variant_D1)]
        with connection.cursor() as cursor:
            cursor.executemany(show_db_query, data_tg)
            connection.commit()
            print("user registered")

def var(user_id):
    try:
        with sql_base_read_() as connection:
            #print(connection)
            show_select = f"SELECT name, variant, variant_D1 FROM data_user WHERE user_id = {user_id}"
            with connection.cursor() as cursor:
                cursor.execute(show_select)
                res = cursor.fetchall()
                text = f'–û–±—É—á–∞—é—â–∏–π—Å—è {res[0][0]}: \n–í–∞—Ä–∏–∞–Ω—Ç ‚Ññ{res[0][1]}, –¥–ª—è –î1 ‚Ññ{res[0][2]}'
                return text

    except:
        return "–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"


class ComandBot(object):

    def __init__(self, message, bot=bot):
        self.message = message
        self.bot = bot

    def welcome(self):
        msg = bot.reply_to(self.message,
                           "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —Ç–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ:")
        user_sql(self.message.from_user.id)
        name_dict.update({str(self.message.chat.id): []})
        return msg

    def name_search(self):
        text = self.message.text
        df = pd.read_excel('–ö–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç.xlsx')
        name_dict[str(self.message.chat.id)].append(df.loc[df['name'] == text.title()]['name'].values[0])
        name_dict[str(self.message.chat.id)].append(
            df.loc[df['name'] == name_dict[str(self.message.chat.id)][0]]['profile'].values[0])
        name_dict[str(self.message.chat.id)].append(
            str(df.loc[df['name'] == name_dict[str(self.message.chat.id)][0]]['group'].values[0]))
        name_dict[str(self.message.chat.id)].append(
            df.loc[df['name'] == name_dict[str(self.message.chat.id)][0]]['section'].values[0])
        name_dict[str(self.message.chat.id)].append(
            str(df.loc[df['name'] == name_dict[str(self.message.chat.id)][0]]['variant'].values[0]))
        name_dict[str(self.message.chat.id)].append(
            str(df.loc[df['name'] == name_dict[str(self.message.chat.id)][0]]['variant_D1'].values[0]))

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ù–µ—Ç")
        btn2 = types.KeyboardButton("–î–∞")
        markup.add(btn1, btn2)
        msg = bot.send_message(self.message.chat.id,
                               f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å: {name_dict[str(self.message.chat.id)][0]}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {name_dict[str(self.message.chat.id)][1]}, –≥—Ä—É–ø–ø–∞ {name_dict[str(self.message.chat.id)][2]}, –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_dict[str(self.message.chat.id)][3]}',
                               reply_markup=markup)
        return msg

    def button_default(self):  # –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but = (types.KeyboardButton(bs) for bs in butList)
        markup.add(*but)
        return markup

    def app_user(self):
        user_reg(str(self.message.chat.id), name_dict[str(self.message.chat.id)][0], name_dict[str(self.message.chat.id)][1],
                 name_dict[str(self.message.chat.id)][2], name_dict[str(self.message.chat.id)][3],
                 name_dict[str(self.message.chat.id)][4], name_dict[str(self.message.chat.id)][5])
        bot.send_message(admin(),
                         f'–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: \n{name_dict[str(self.message.chat.id)][0]} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {name_dict[str(self.message.chat.id)][1]}, –≥—Ä—É–ø–ø–∞ {name_dict[str(self.message.chat.id)][2]}, –ø–æ–¥–≥—Ä—É–ø–ø–∞ {name_dict[str(self.message.chat.id)][3]}')
        name_dict[str(self.message.chat.id)].clear()
        bot.send_message(self.message.chat.id,
                         "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                         reply_markup=self.button_default())

    def menu(self):
        bot.send_message(self.message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞ ‚öôÔ∏è', reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(self.message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–≤–µ–¥–µ–Ω–∞ ‚å®Ô∏è',
                         reply_markup=self.button_default())

    def del_menu(self):
        bot.send_message(self.message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ ‚öôÔ∏è', reply_markup=types.ReplyKeyboardRemove())

    def help_bot(self):
        HELP = """
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä–æ–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞".
–í –º–µ–Ω—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ—Å–æ–±–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã, —É—á–µ–±–Ω–∏–∫.
–¢–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫—É –ø–æ —á–∞—Ç-–±–æ—Ç—É
/menu - –≤—ã–∑–æ–≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
/mic - —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ¬© –Æ—Ä–∏–π –°–æ–ª–¥–∞—Ç–æ–≤
        """
        bot.send_message(self.message.chat.id, HELP)

class ButtonBot(object):

    def __init__(self, message, bot=bot):
        self.message = message
        self.inl = types.InlineKeyboardMarkup()

    def top_stud(self):
        button1 = types.InlineKeyboardButton("–†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
                                             url='https://drive.google.com/file/d/17H105tExHL_ZZjmNGhy5yhqfOBsexuvv/view?usp=sharing')
        self.inl.add(button1)
        bot.send_message(self.message.chat.id, '–†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ –ø–æ —Å—Å—ã–ª–∫–µ:', reply_markup=self.inl)

    def metod(self):
        button1 = types.InlineKeyboardButton("–°—Ç–∞—Ç–∏–∫–∞",
                                             url='https://drive.google.com/file/d/172EuTxLjZlYR0GYi03wdbzu70kae4RdC/view?usp=sharing')
        button2 = types.InlineKeyboardButton("–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞",
                                             url='https://drive.google.com/file/d/1i23gh8Kcsu-R5OkyHfdbp7SFUW2c73kx/view?usp=sharing')
        button3 = types.InlineKeyboardButton("–î–∏–Ω–∞–º–∏–∫–∞",
                                             url='https://drive.google.com/file/d/1wrluEFNR18gYT1wFe-oLsmar9pxSB8ZH/view?usp=sharing')
        self.inl.add(button1, button2, button3)
        bot.send_message(self.message.chat.id, '–°—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è:', reply_markup=self.inl)

    def study(self):
        button1 = types.InlineKeyboardButton("–£—á–µ–±–Ω–∏–∫",
                                             url='https://drive.google.com/file/d/17OhsVDAaPVkdBEMbjl3wR0Scj7WjeMYo/view?usp=drive_link')
        self.inl.add(button1)
        bot.send_message(self.message.chat.id, '–°—Å—ã–ª–∫–∞ –Ω–∞ —É—á–µ–±–Ω–∏–∫: "–ö—Ä–∞—Ç–∫–∏–π –∫—É—Ä—Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏"',
                         reply_markup=self.inl)

    def shedule(self):
        button1 = types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                                             url='https://drive.google.com/file/d/17JUNCEKttgoa4HwPY63l0RB3CGJITdyU/view?usp=sharing')
        self.inl.add(button1)
        bot.send_message(self.message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',
                         reply_markup=self.inl)

    def contact(self):
        button1 = types.InlineKeyboardButton("Telegram", url='https://t.me/general_soldatov')
        button2 = types.InlineKeyboardButton("–í–ö", url='https://vk.com/general_soldatov')
        self.inl.add(button1, button2)
        bot.send_message(self.message.chat.id, '–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',
                         reply_markup=self.inl)


class AdminBot(object):

    def __init__(self, message, bot=bot):
        self.message = message

    def adminButton(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but = (types.KeyboardButton(bs) for bs in butAdmin)
        markup.add(*but)
        return markup



test_data = {}

name_dict = {}

varTask = {}

@bot.message_handler(commands=['start']) # —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î
def send_welcome(message): #—Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
	msg = ComandBot(message).welcome()
	bot.register_next_step_handler(msg, namered)


def namered(message):
    try:
        msg = ComandBot(message).name_search()
        bot.register_next_step_handler(msg, appUser)
    except Exception as e:
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(msg, namered)
        print(e)

def appUser(message):
    text = message.text
    if text == "–ù–µ—Ç":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ.")
        bot.register_next_step_handler(msg, namered)
    else:
        ComandBot(message).app_user()

@bot.message_handler(commands=['menu']) #–≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def menu(message): ComandBot(message).menu()

@bot.message_handler(commands=['del']) #—É–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω—é
def delMenu(message): ComandBot(message).del_menu()

@bot.message_handler(commands=['help']) #–≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏
def helpBot(message): ComandBot(message).help_bot()

@bot.message_handler(commands=['mic']) #—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
def mic(message):
    msg = bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    bot.register_next_step_handler(msg, transcripter)

def transcripter(message):
    try:
        filename = download_file(bot, message.voice.file_id)
        text = recognize_speech(filename)
        bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send.message(message.chat.id, f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {e}')

@bot.message_handler(commands=['admin']) #–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def adminBot(message):
    if message.from_user.id == admin():
        bot.send_message(message.from_user.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
                         reply_markup=AdminBot(message).adminButton())

    else:
        bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


@bot.message_handler(func=lambda m: m.text == "üìà –¢–æ–ø")
def topStudy(message): ButtonBot(message).top_stud()

@bot.message_handler(func=lambda m: m.text == "üìí –ú–µ—Ç–æ–¥–∏—á–∫–∏")
def metodick(message): ButtonBot(message).metod()

@bot.message_handler(func=lambda m: m.text == "üìñ –£—á–µ–±–Ω–∏–∫")
def textbook(message): ButtonBot(message).study()

@bot.message_handler(func=lambda m: m.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
def shedule(message): ButtonBot(message).shedule()

@bot.message_handler(func=lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
def contPrep(message): ButtonBot(message).contact()

@bot.message_handler(func=lambda m: m.text == "üîë –í–∞—Ä–∏–∞–Ω—Ç")
def varez(message):
    bot.send_message(message.chat.id, var(str(message.chat.id)))

@bot.message_handler(func=lambda m: (m.text == "üì© –†–∞—Å—Å—ã–ª–∫–∞" and m.chat.id == admin()))
def sendall(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
    bot.register_next_step_handler(msg, mailer)

def mailer(message):
    user_select(message)

@bot.message_handler(func=lambda m: (m.text == "üóÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and m.chat.id == admin()))
def listUser(message):
    with sql_base_read_() as connection:
        show_select = "SELECT ROW_NUMBER() OVER(ORDER BY name), name, profile, variant, variant_D1 FROM data_user"
        with connection.cursor() as cursor:
            cursor.execute(show_select)
            text = '\n'.join((f'{res[0]}. {res[1]}, {res[2]}, {res[3]}, {res[4]}') for res in cursor.fetchall())
            bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda m: (m.text == "üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç" and m.chat.id == admin()))
def readStud(message):
    bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    bot.send_message(message.chat.id, "‚åõÔ∏è")
    gc = gspread.service_account(filename='termex-bot-0ea77baf201b.json') # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ JSON
    sh = gc.open("–¢–µ—Ä–º–µ—Ö 2/2024") #–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    worksheet = sh.worksheet("termex_bot")
    try:
        with sql_base_read_() as connection:
            show_select = "SELECT ROW_NUMBER() OVER(ORDER BY name), id, user_id, name, variant, variant_D1 FROM data_user"
            with connection.cursor() as cursor:
                cursor.execute(show_select)
                headerTab = ["‚Ññ", 'base_id', 'user_id', 'name', 'variant', 'variant_D1']
                for ht in range(len(headerTab)):
                    worksheet.update_cell(1, ht+1, headerTab[ht])

                for res in cursor.fetchall():
                    for its in range(6):
                        worksheet.update_cell(int(res[0]+1), its+1, res[its])
                        time.sleep(1)

        bot.send_message(message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")


@bot.message_handler(func=lambda m: (m.text == "‚ùå –í—ã—Ö–æ–¥" and m.chat.id == admin()))
def exitBot(message):
    bot.send_message(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                     reply_markup=ComandBot(message).button_default())

@bot.message_handler(content_types=['text'])
def texter(message):
    ComandBot(message).help_bot()


print(datetime.now()) #–≤—ã–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞

while True: #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    try:
      bot.polling(none_stop=True, interval=1)
    except:
      print('upalo ' + str(datetime.now()))
      logging.error('error: {}'.format(sys.exc_info()[0]))
      time.sleep(5)
